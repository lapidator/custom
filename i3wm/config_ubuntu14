# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout somewhen, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see http://i3wm.org/docs/userguide.html for a complete reference!





# +-----------------------------------+
# |   I 3   C O N F I G   S T A R T   |
# +-----------------------------------+

# set modifier key (Mod1 == left Alt ; Mod4 == Super/Win Key)
set $mod Mod4

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod





# +-------------------------+
# |   W O R K S P A C E S   |
# +-------------------------+

# set workspace names (can be anything, but numbers at the beginning change ordering behavior)
# if naming scheme #:ws-name (#=nr. of workspace), leading numbers can be stripped while keeping ordering behavior (see 'strip_workspace_numbers' in 'bar' section)
#set $ws1 "一:インターネット"
#set $ws2 "二:コンソール"
#set $ws3 "三:職業|しょくぎょう"
#set $ws4 "四:モニタリング"
#set $ws5 "五:四方山|よもやま"
set $ws1 1:一
set $ws2 2:二
set $ws3 3:三
set $ws4 4:四
set $ws5 5:五
set $ws6 6:六
set $ws7 7:七
set $ws8 8:八
set $ws9 9:九
set $ws10 10:十

# assign workspaces to specific output devices
# device names from output of cmd "xrandr"
workspace $ws1 output DVI-I-2
workspace $ws2 output DVI-I-2
workspace $ws3 output DVI-I-2
workspace $ws4 output DVI-I-2
workspace $ws5 output DVI-I-2
workspace $ws6 output DVI-I-2
workspace $ws7 output DVI-I-1
workspace $ws8 output DVI-I-1
workspace $ws9 output DVI-I-1
workspace $ws10 output DVI-I-1





# +-------------------------------+
# |   I 3 W M   S E T T I N G S   |
# +-------------------------------+
## settings controlling the behavior of i3 window manager

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below. ISO 10646 = Unicode
#font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, if you need a lot of unicode glyphs or
# right-to-left text rendering, you should instead use pango for rendering and
# chose a FreeType font, such as:
font pango:DejaVu Sans Mono 9

# automatical screen lock using xautolock (-time parameter default in minutes)
#exec_always --no-startup-id xautolock -time 10 -locker "i3lock -c 000000 -d && sleep 1"
exec_always --no-startup-id xautolock -time 9 -locker "sh /home/localuser/.i3/lock_i3.sh"

# determines the border style of new windows
# possible options: normal|none|pixel <px>, e.g.: new_window pixel 0 (same as: new_window none)
#new_window normal
# 'new_window' gets overwritten by following, which deactivates title bars and sets all four borders to 1 pixel
for_window [class="^.*"] border pixel 1

# hide container borders adjacent to screen edges
# possible arguments are none|vertical|horizontal|both|smart
# (not necessary if borders are already deactivated via 'new_window')
#hide_edge_borders both

# enable automatic back-and-forth when switching workspace
#workspace_auto_back_and_forth yes

# control mouse warp when moving focus to another container
mouse_warping none





# +-------------------------------+
# |   I 3 W M   K E Y B I N D S   |
# +-------------------------------+

# start a terminal
bindsym $mod+Return exec i3-sensible-terminal

# kill focused window
bindsym $mod+Shift+q kill

# start dmenu (a program launcher)
bindsym $mod+d exec dmenu_run
# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
# bindsym $mod+d exec --no-startup-id i3-dmenu-desktop

# change focus (homerow)
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+l focus up
bindsym $mod+semicolon focus right

# move focused window (homerow)
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+colon move right

## alternatively, use cursor keys [DISABLED TO FORCE LEARN THE HOMEROW, EVEN THOUGH THIS WON'T BE FUN FOR GERMAN LAYOUT]
## focus ...
#bindsym $mod+Left focus left
#bindsym $mod+Down focus down
#bindsym $mod+Up focus up
#bindsym $mod+Right focus right
## ... and move window
#bindsym $mod+Shift+Left move left
#bindsym $mod+Shift+Down move down
#bindsym $mod+Shift+Up move up
#bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+h split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
#bindsym $mod+d focus child

# window resizing
bindsym $mod+r mode "resize"

# stick a window to be shown on all workplaces (only floating!)
bindsym $mod+t sticky toggle

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9
bindsym $mod+0 workspace $ws10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9
bindsym $mod+Shift+0 move container to workspace $ws10

# switch between next and previous workspace using $mod and comma or period
bindsym $mod+comma workspace prev
bindsym $mod+period workspace next
# switch to next workspace using $mod and tab (just for fast access, using Shift+Tab worked but also showed an error each time)
bindsym $mod+Tab workspace next
# move windows between next and previous workspaces using $mod+Shift and comma or period
bindsym $mod+Shift+comma move container to workspace prev
bindsym $mod+Shift+period move container to workspace next

# small Python script for log out, reboot, shut down, etc.
bindsym $mod+Delete exec python ~/.i3/i3-exit.py

# use screenshot of a corrupted filedialog as lockscreen
bindsym $mod+End exec i3lock -i ~/.i3/corrupted_filedialog2.png

## screen lock via i3lock
## -c 000000 sets black as a solid background color
## -d turns off your screen instantly using DPMS
#bindsym Ctrl+Mod1+l exec i3lock -c 000000 -d
## or switch upper binding to using a Windows-10 Desktop
## with a windows pointer '-p win'
bindsym Ctrl+Mod1+l exec i3lock -u -i ~/.i3/win10.png -p win

# screen lock via a small script to blur the screen
bindsym $mod+x exec ~/.i3/lock_i3.sh

# toggle border style of selected window
# (switch between normal, none, and pixel 1)
bindsym $mod+b border toggle

# start calculator using designated calculator key
bindsym XF86Calculator exec "gnome-calculator"

# mouse binds
#
# buttons according to 'xev | grep button'
# left click	= button 1
# middle click	= button 2
# right click	= button 3
# scroll up	= button 4
# scroll down	= button 5
#
## middle button over titlebar kills window
#bindsym --release button2 kill
bindsym --release $mod+button2 kill
## middle button and modifer over any part of window kills window
#bindsym --whole-window $mod+button2 kill
## right button toggles floating (DOES NOT WORK, AS RIGHT BUTTON IS USED FOR RESIZING!)
#bindsym button3 floating toggle
#bindsym $mod+button3 floating toggle





# +---------------------------------------+
# |   M I S C .   D E F I N I T I O N S   |
# +---------------------------------------+

# define resize mode (mouse input works aswell)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.

        # vim-like bindings
        bindsym j resize shrink width 10 px or 10 ppt
        bindsym k resize grow height 10 px or 10 ppt
        bindsym l resize shrink height 10 px or 10 ppt
        bindsym semicolon resize grow width 10 px or 10 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # escape resize mode: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}

# set up a status/workspace bar
# here: i3status
bar {
        status_command i3status
	position top
        strip_workspace_numbers yes
	tray_output DVI-I-2

	colors {
		# single color properties
		background #000000
		statusline #ffffff
		separator #999999

		# multi-color properties #border #background #text
		#focused_workspace #7efcff #222222 #7efcff
		focused_workspace #7efcff #000000 #7efcff
		#active_workspace #555555 #222222 #7efcff
		active_workspace #000000 #000000 #7efcff
		#inactive_workspace #222222 #222222 #999999
		inactive_workspace #000000 #000000 #999999
		urgent_workspace #900000 #000000 #7efcff
	}
}





# +---------------------------------+
# |   A U D I O   K E Y B I N D S   |
# +---------------------------------+
## for Pulse Audio controls

# either use media keys or Ctrl(+Shift) with comma(lower), period(raise), slash(mute)
# increase sound volume
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume 0 -- +5% && killall -SIGUSR1 i3status
bindsym Ctrl+period exec --no-startup-id pactl set-sink-volume 0 -- +1% && killall -SIGUSR1 i3status
bindsym Ctrl+Shift+period exec --no-startup-id pactl set-sink-volume 0 -- +5% && killall -SIGUSR1 i3status
# decrease sound volume
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume 0 -- -5% && killall -SIGUSR1 i3status
bindsym Ctrl+comma exec --no-startup-id pactl set-sink-volume 0 -- -1% && killall -SIGUSR1 i3status
bindsym Ctrl+Shift+comma exec --no-startup-id pactl set-sink-volume 0 -- -5% && killall -SIGUSR1 i3status
# mute sound
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute 0 toggle && killall -SIGUSR1 i3status
bindsym Ctrl+slash exec --no-startup-id pactl set-sink-mute 0 toggle && killall -SIGUSR1 i3status





# +-----------------+
# |   C O L O R S   |
# +-----------------+

# class                 border  backgr. text    indicator child_border
#client.focused          #4c7899 #285577 #ffffff #2e9ef4   #285577
#client.focused          #000000 #5f1b7f #ffffff #ffffff   #00ff00
#client.focused          #7efcff #000000 #ffffff #ffffff   #7efcff
client.focused          #7efcff #7efcff #000000 #ffffff   #7efcff
#client.focused_inactive #333333 #5f676a #ffffff #484e50   #5f676a
client.focused_inactive #222222 #222222 #ffffff #333333   #222222
#client.unfocused        #333333 #222222 #888888 #292d2e   #222222
client.unfocused        #222222 #222222 #767676 #333333   #222222
#client.urgent           #2f343a #900000 #ffffff #900000   #900000
#client.placeholder      #000000 #0c0c0c #ffffff #000000   #0c0c0c
client.background       #000000





# +-----------------------------------------------------------+
# |   S T A R T U P   P R O G R A M S   &   S E T T I N G S   |
# +-----------------------------------------------------------+
## use 'exec' or 'exec --no-startup-id' to run cmd once, but not again for $mod+Shift+r
## use 'exec_always' or 'exec_always --no-startup-id' to run cmd every time i3 is launched, including $mod+Shift+r
#
## using such syntax might NOT do what expected, e.g. 'exec --no-startup-id "program1; program2"'
## this runs program1 and when it is closed (may be specific to the program) then run program2

# set up display layout
exec "xrandr --output DVI-I-2 --auto --left-of DVI-I-1"

# set a background image
#exec_always feh --bg-scale ~/Pictures/black.jpeg
#exec_always feh --bg-scale ~/Pictures/wallhaven-758133_1920x1200.png --bg-scale ~/Pictures/wallhaven-700779_ed_1280x1024.png
#exec_always feh --bg-scale ~/Pictures/wallhaven-758133_1920x1200.png --bg-scale ~/Pictures/black.jpeg
#exec_always feh --bg-scale ~/Pictures/black.jpeg --bg-scale ~/Pictures/black.jpeg
#exec_always feh --bg-scale ~/Pictures/rbtv_edit.jpg --bg-scale ~/Pictures/rbtv_edit.jpg
#exec_always feh --bg-scale ~/Pictures/wallhaven-dgzmxj_1920x1200.png --bg-scale ~/Pictures/wallhaven-76gg69_1920x1200.png
exec_always feh --bg-scale ~/Pictures/python_wp_1920x1200.png --bg-scale ~/Pictures/i3wm_wp_1920x1200.png

# activate NumLock
exec_always --no-startup-id "numlockx on"

# start dropbox
#exec --no-startup-id "sleep 5; dropbox start"
exec --no-startup-id "dropbox start"

#exec --no-startup-id i3-msg 'workspace $ws4; exec gnome-terminal -e gotop; workspace $ws1'
#exec waterfox

## load saved layouts (if config, etc. is there, a sensible filepath is ~/.i3/<layout_name>.json) [how to is below]
exec --no-startup-id "i3-msg 'workspace $ws7; append_layout /home/localuser/.i3/ws7.json'"
exec --no-startup-id "i3-msg 'workspace $ws3; append_layout /home/localuser/.i3/ws3.json'"
exec --no-startup-id "i3-msg 'workspace $ws2; append_layout /home/localuser/.i3/ws2.json'"
exec --no-startup-id "i3-msg 'workspace $ws1; append_layout /home/localuser/.i3/ws1.json'"
## then execute the respective programs to fill the layout
#exec --no-startup-id i3-msg "workspace $ws7; exec gnome-terminal -e gotop; exec waterfox; exec code; exec nautilus"
#exec --no-startup-id i3-msg "workspace $ws7; exec gnome-terminal -e 'gotop -r 0.5'"
## similar to above, but fewer calls per line
exec --no-startup-id waterfox
#exec --no-startup-id code
exec --no-startup-id "nautilus ~/Dropbox/uni_stuff/Praktikumsbetreuer"
exec --no-startup-id i3-msg "workspace $ws7; exec gnome-terminal -e 'gotop -r 0.5'; exec gnome-terminal"
exec --no-startup-id i3-msg "exec sleep 45; workspace $ws7; exec 'waterfox --private-window'"
## how to save a layout and load it in i3wm on startup:
## open the layout as it should be saved on one workspace
## if a workspace $wsX is named "1:<strange_symbols>" then save it via
## $ i3-save-tree --workspace 1:<strange_symbols> > /path/to/save/layout/<filename>.json
## the workspace's name is very important! if quotation marks are used within the name, these will interfere with some lines below, so try to NOT use quotation marks in the workspace name
## open the file <filename>.json and uncomment window properties, which make i3wm recognize the specific windows
## [opt] test it via $ i3-msg "workspace 1:<strange_symbols>; append_layout /path/to/save/layout/<filename>.json"
## if it works, open the i3 config file and add such a line to load the layout on startup
## exec --no-startup-id "i3-msg 'workspace $wsX; append_layout /path/to/save/layout/<filename>.json'"
## then the respective programs need to be started and they will automatically fill their placeholder windows

# multiple programs for startup
# (theoretically: gotop on ws7; VsCode on ws2; Waterfox on ws1 ;; in reality: gotop on ws7; VsCode and Waterfox on ws1)
#exec --no-startup-id i3-msg 'workspace $ws7; exec gnome-terminal -e gotop; workspace $ws2; exec code; workspace $ws1; exec waterfox'

# switch between different keyboard layouts via Alt+Shift
# does/did not always work, thus use the exec_always syntax aswell
exec sleep 1; setxkbmap -layout us,de
exec sleep 1; setxkbmap -option 'grp:alt_shift_toggle'
exec_always setxkbmap -layout us,de
exec_always setxkbmap -option 'grp:alt_shift_toggle'

# set mouse pointer speed/acceleration
# example description:
# use 'xinput list', 'xinput list-props ID' to get settings
# where the ID of a device is given by 'xinput list', e.g.
# for 'Logitech USB Optical Mouse' it could be id=8
# via 'xinput list-props 8' one can see all properties
# these are switched via their own IDs again, e.g.
#exec xinput set-prop 8 271 3.5
#exec_always xinput set-prop 8 271 3.5
# here 8 is the ID of Logitech USB Optical Mouse and 271 of Device Accel Constant Deceleration
# higher values == smaller speeds
# via same procedure another setting
#exec xinput set-prop 8 273 2.0
#exec_always xinput set-prop 8 273 2.0
# 8: Logitech USB Optical Mouse ID; 273: Device Accel Velocity Scaling (default 10.0)
#
# same as above, but try to automatically find the ID of the mouse:
#exec MouseID=$(xinput list --id-only "Logitech USB Optical Mouse")
#exec xinput set-prop $MouseID 271 3.5
#exec_always xinput set-prop $MouseID 271 3.5
#exec xinput set-prop $MouseID 273 2.0
#exec_always xinput set-prop $MouseID 273 2.0
#
# above version does not work in i3wm, so try nested cmd version
exec xinput set-prop "$(xinput list --id-only "Logitech USB Optical Mouse")" 271 3.5
exec_always xinput set-prop "$(xinput list --id-only "Logitech USB Optical Mouse")" 271 3.5
exec xinput set-prop "$(xinput list --id-only "Logitech USB Optical Mouse")" 273 2.0
exec_always xinput set-prop "$(xinput list --id-only "Logitech USB Optical Mouse")" 273 2.0
# here the quotes can be nested, as each instance of $(...) recognizes a new set of quotation marks






# +-----------------------------------------------------------------------------+
# |   W I N D O W   C L A S S I F I C A T I O N S   &   A S S I G N M E N T S   |
# +-----------------------------------------------------------------------------+
# to find classifications use 'xprop' in a terminal and cursor to click on respective window
#
# WM_CLASS       shows usually two entries, first 'instance', then 'class'
# _NET_WM_NAME   shows 'title' [might also match with WM_NAME(STRING)]
# WM_WINDOW_ROLE shows 'window_role'
#
# separate multiple variables via space (no comma)

# window assignments to specific workspaces
assign [class="Firefox"] $ws1
#assign [class="Waterfox"] $ws1
#assign [class="jedit"] $ws3
#assign [class="libreoffice-startcenter|Soffice"] $ws3
#assign [title="LibreOffice"] $ws3
#assign [class="libreoffice-calc"] $ws3

# enable floating for some browser-related windows
# Firefox (legacy -- not used anymore)
for_window [class="Firefox" title="Library"] floating enable
for_window [class="Firefox" title="Developer Tools - chrome://browser/content/browser.xul"] floating enable
for_window [class="Firefox" title="Page Info"] floating enable
for_window [class="Firefox" title="Classic Theme Restorer"] floating enable
# Waterfox
for_window [class="Waterfox" title="Downloads"] floating enable
for_window [class="Waterfox" title="Developer Tools - chrome://browser/content/browser.xul"] floating enable
for_window [class="Waterfox" title="Page Info"] floating enable
for_window [class="Waterfox" title="Classic Theme Restorer"] floating enable
for_window [class="Waterfox" title="Hide Navigation Bar Options"] floating enable
for_window [class="Waterfox" title="Hide Tabbar Options"] floating enable
for_window [class="Waterfox" title="Custom New Tab Preferences"] floating enable
for_window [class="Waterfox" title="Install user style"] floating enable

# more floating
for_window [class="Nautilus" title="File Operations"] floating enable
for_window [class="Gcalctool"] floating enable
for_window [class="org-eso-gasgano-Gasgano" title="Preferences Editor"] floating enable
for_window [instance="matplotlib" class="matplotlib"] floating enable
